name: .NET

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Run dotnet format
        run: dotnet format --verify-no-changes --no-restore --severity error
      - name: Setup Terraform
        if: always()
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Run Terraform format
        run: terraform fmt -check ./terraform

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Authenticate nuget
        run: dotnet nuget add source --username ${{ secrets.NUGET_AUTH_GITHUB_USERNAME }} --password ${{ secrets.NUGET_AUTH_GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/City-of-Lincoln-Council/index.json"
      - name: Test
        run: dotnet test --logger:"console;verbosity=detailed"

  build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      - name: Authenticate nuget
        run: dotnet nuget add source --username ${{ secrets.NUGET_AUTH_GITHUB_USERNAME }} --password ${{ secrets.NUGET_AUTH_GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/City-of-Lincoln-Council/index.json"

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
  infrastructure:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: "Provision Infrastructure"
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: "./terraform"

    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -backend-config="storage_account_name=${{secrets.STORAGE_ACCOUNT_NAME}}" -backend-config="resource_group_name=${{secrets.RESOURCE_GROUP_NAME}}" -backend-config="container_name=${{secrets.CONTAINER_NAME}}" -backend-config="key=${{secrets.STATE_KEY_NAME}}"

      - name: Add env file
        run: |
          touch env.tfvars
          echo "azure_ad_tenant_id=\"${{ secrets.AZURE_AD_TENANT_ID }}\"" >> env.tfvars
          echo "storage_account_name=\"${{secrets.STORAGE_ACCOUNT_NAME}}\"" >> env.tfvars
          echo "service_name=\"${{secrets.SERVICE_NAME}}\"" >> env.tfvars
          echo "storage_container_name_production=\"${{secrets.STORAGE_CONTAINER_NAME_PRODUCTION}}\"" >> env.tfvars
          echo "storage_container_name_staging=\"${{secrets.STORAGE_CONTAINER_NAME_STAGING}}\"" >> env.tfvars
          echo "resource_group_name=\"${{secrets.RESOURCE_GROUP_NAME}}\"" >> env.tfvars
          echo "resource_group_location=\"${{secrets.RESOURCE_GROUP_LOCATION}}\"" >> env.tfvars
          echo "gov_notify_key_production=\"${{secrets.GOV_NOTIFY_KEY_PRODUCTION}}\"" >> env.tfvars
          echo "gov_notify_key_staging=\"${{secrets.GOV_NOTIFY_KEY_STAGING}}\"" >> env.tfvars
          echo "addresses_api_url_production=\"${{secrets.ADDRESSES_API_URL_PRODUCTION}}\"" >> env.tfvars
          echo "addresses_api_url_staging=\"${{secrets.ADDRESSES_API_URL_STAGING}}\"" >> env.tfvars
          echo "authentication_identifier_production=\"${{secrets.AUTHENTICATION_IDENTIFIER_PRODUCTION}}\"" >> env.tfvars
          echo "authentication_identifier_staging=\"${{secrets.AUTHENTICATION_IDENTIFIER_STAGING}}\"" >> env.tfvars
          echo "internal_email_production=\"${{secrets.INTERNAL_EMAIL_PRODUCTION}}\"" >> env.tfvars
          echo "internal_email_staging=\"${{secrets.INTERNAL_EMAIL_STAGING}}\"" >> env.tfvars
          echo "confirmation_email_notify_template_id=\"${{secrets.CONFIRMATION_EMAIL_NOTIFY_TEMPLATE_ID}}\"" >> env.tfvars
          echo "confirmation_sms_notify_template_id=\"${{secrets.CONFIRMATION_SMS_NOTIFY_TEMPLATE_ID}}\"" >> env.tfvars
          echo "internal_email_notify_template_id=\"${{secrets.INTERNAL_EMAIL_NOTIFY_TEMPLATE_ID}}\"" >> env.tfvars
          echo "days_until_image_expiry_production=\"${{secrets.DAYS_UNTIL_IMAGE_EXPIRY_PRODUCTION}}\"" >> env.tfvars
          echo "days_until_image_expiry_staging=\"${{secrets.DAYS_UNTIL_IMAGE_EXPIRY_STAGING}}\"" >> env.tfvars
          echo "scheduling_api_url_production=\"${{secrets.SCHEDULING_API_URL_PRODUCTION}}\"" >> env.tfvars
          echo "scheduling_api_url_staging=\"${{secrets.SCHEDULING_API_URL_STAGING}}\"" >> env.tfvars
          echo "jwt_secret_staging=\"${{secrets.JWT_SECRET_STAGING}}\"" >> env.tfvars
          echo "jwt_secret_production=\"${{secrets.JWT_SECRET_PRODUCTION}}\"" >> env.tfvars
          echo "sentry_dsn=\"${{secrets.SENTRY_DSN}}\"" >> env.tfvars
          echo "sor_configuration_production=\"${{secrets.SOR_CONFIG_PRODUCTION}}\"" >> env.tfvars
          echo "sor_configuration_staging=\"${{secrets.SOR_CONFIG_STAGING}}\"" >> env.tfvars
          echo "allowed_appointment_slots_production=\"${{secrets.ALLOWED_APPOINTMENT_SLOTS_PRODUCTION}}\"" >> env.tfvars
          echo "allowed_appointment_slots_staging=\"${{secrets.ALLOWED_APPOINTMENT_SLOTS_STAGING}}\"" >> env.tfvars
          echo "service_plan_name=\"${{secrets.SERVICE_PLAN_NAME}}\"" >> env.tfvars

      - name: Terraform Validate
        run: terraform validate -no-color
      - name: Terraform Plan
        run: terraform plan -var-file="env.tfvars"

      - name: Terraform Apply
        id: terraform_apply
        run: |
          terraform apply -auto-approve -var-file="env.tfvars"

  deploy-staging:
    name: "Deploy Staging"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [format, test, build, infrastructure]
    environment:
      name: "Staging"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Add mask to obscure secrets in debug logs
        run: |
          echo "::add-mask::${{ secrets.COSMOS_CONTAINER_NAME_STAGING }}"
          echo "::add-mask::${{ secrets.COSMOS_ACCOUNT_PRIMARY_KEY }}"
          echo "::add-mask::${{ secrets.COSMOS_DATABASE_NAME_STAGING }}"
          echo "::add-mask::${{ secrets.COSMOS_ACCOUNT_ENDPOINT }}"
          echo "::add-mask::${{ secrets.ADDRESSES_API_URL_STAGING }}"
          echo "::add-mask::${{ secrets.AUTHENTICATION_IDENTIFIER_STAGING }}"
          echo "::add-mask::${{ secrets.STORAGE_ACCOUNT_PRIMARY_CONNECTION_STRING }}"
          echo "::add-mask::${{ secrets.CONFIRMATION_EMAIL_NOTIFY_TEMPLATE_ID }}"
          echo "::add-mask::${{ secrets.CONFIRMATION_SMS_NOTIFY_TEMPLATE_ID }}"
          echo "::add-mask::${{ secrets.DAYS_UNTIL_IMAGE_EXPIRY_STAGING }}"
          echo "::add-mask::${{ secrets.GOV_NOTIFY_KEY_STAGING }}"
          echo "::add-mask::${{ secrets.INTERNAL_EMAIL_STAGING }}"
          echo "::add-mask::${{ secrets.INTERNAL_EMAIL_NOTIFY_TEMPLATE_ID }}"
          echo "::add-mask::${{ secrets.JWT_SECRET_STAGING }}"
          echo "::add-mask::${{ secrets.SCHEDULING_API_URL_STAGING }}"
          echo "::add-mask::${{ secrets.SENTRY_DSN }}"
          echo "::add-mask::${{ secrets.SOR_CONFIG_STAGING }}"
          echo "::add-mask::${{ secrets.ALLOWED_APPOINTMENT_SLOTS_STAGING }}"
          echo "::add-mask::${{ secrets.STORAGE_CONTAINER_NAME_STAGING }}"

      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{secrets.SERVICE_NAME}}
          slot-name: "Staging"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_STAGING }}
          package: .

  deploy-production:
    name: "Deploy Production"
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      - name: Add mask to obscure secrets in debug logs
        run: |
          echo "::add-mask::${{ secrets.COSMOS_CONTAINER_NAME_PRODUCTION }}"
          echo "::add-mask::${{ secrets.COSMOS_ACCOUNT_PRIMARY_KEY }}"
          echo "::add-mask::${{ secrets.COSMOS_DATABASE_NAME_PRODUCTION }}"
          echo "::add-mask::${{ secrets.COSMOS_ACCOUNT_ENDPOINT }}"
          echo "::add-mask::${{ secrets.ADDRESSES_API_URL_PRODUCTION }}"
          echo "::add-mask::${{ secrets.AUTHENTICATION_IDENTIFIER_PRODUCTION }}"
          echo "::add-mask::${{ secrets.STORAGE_ACCOUNT_PRIMARY_CONNECTION_STRING }}"
          echo "::add-mask::${{ secrets.CONFIRMATION_EMAIL_NOTIFY_TEMPLATE_ID }}"
          echo "::add-mask::${{ secrets.CONFIRMATION_SMS_NOTIFY_TEMPLATE_ID }}"
          echo "::add-mask::${{ secrets.DAYS_UNTIL_IMAGE_EXPIRY_PRODUCTION }}"
          echo "::add-mask::${{ secrets.GOV_NOTIFY_KEY_PRODUCTION }}"
          echo "::add-mask::${{ secrets.INTERNAL_EMAIL_PRODUCTION }}"
          echo "::add-mask::${{ secrets.INTERNAL_EMAIL_NOTIFY_TEMPLATE_ID }}"
          echo "::add-mask::${{ secrets.JWT_SECRET_PRODUCTION }}"
          echo "::add-mask::${{ secrets.SCHEDULING_API_URL_PRODUCTION }}"
          echo "::add-mask::${{ secrets.SENTRY_DSN }}"
          echo "::add-mask::${{ secrets.SOR_CONFIG_PRODUCTION }}"
          echo "::add-mask::${{ secrets.ALLOWED_APPOINTMENT_SLOTS_PRODUCTION }}"
          echo "::add-mask::${{ secrets.STORAGE_CONTAINER_NAME_PRODUCTION }}"

      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{secrets.SERVICE_NAME}}
          slot-name: "Production"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_PRODUCTION }}
          package: .
